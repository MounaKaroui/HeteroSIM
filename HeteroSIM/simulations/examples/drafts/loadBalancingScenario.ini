[General]
network=heterosim.simulations.networks.SimpleNetwork
debug-on-errors = true
print-undisposed = true
cmdenv-express-mode = true
cmdenv-autoflush = true
**.scalar-recording = true
**.vector-recording = true

sim-time-limit = 20s
outputvectormanager-class="omnetpp::envir::SqliteOutputVectorManager"
outputscalarmanager-class="omnetpp::envir::SqliteOutputScalarManager"




#### CAR mobility parameters
*.*.mobility.initFromDisplayString = false
*.car[*].mobility.constraintAreaMaxX = 500m
*.car[*].mobility.constraintAreaMinX = 0m
*.car[*].mobility.constraintAreaMaxY = 500m
*.car[*].mobility.constraintAreaMinY = 0m
*.car[*].mobility.constraintAreaMaxZ = 1.5m
*.car[*].mobility.constraintAreaMinZ = 1.5m
*.car[*].mobility.speed = 8.3mps

#### cars numbers
*.numCars = ${nbrTrs=5}
#### Radio medium
*.radioMedium.pathLossType = "TwoRayInterference"
#####


[Config loadBalancing]
result-dir = loadBalancing
*.car[*].*.isDeciderActive =true


### common radio setting
*.car[*].wlan[*].typename = "VanetNic"
*.car[*].wlan[*].bitrate= ${bitrate=6} Mbps
*.car[*].wlan[*].mac.maxQueueSize = 4000

### common app setting
*.car[*].applLayer[*].msgLength=${packetLength=600}B

######## With decider active nodes ########
*.car[*].numRadios = 2
*.car[*].*.interfaceToProtocolMapping="0:80211p,1:80211p"
####with decider active nodes : interface in network 1
*.car[*].wlan[0].radio.channelNumber = 172  ### increasing
####with decider active nodes : interface in network 2
*.car[*].wlan[1].radio.channelNumber = 180 ### decreasing

### with decider active nodes : traffic setting
*.car[*].numApps = 3
#data traffic
*.car[*].applLayer[0].appID=0
*.car[*].applLayer[0].typename="VanetApp"
*.car[*].applLayer[0].sendInterval= ${nbrTrs}*((${packetLength} * 8) / (${bitrate}*2)) * (100/(${OfferedLoadRate=10,20,30,40,50,60,70,80,90,100}*0.98))* 1us ## 95 % of data traffic
*.car[*].applLayer[0].startTime=${nbrTrs}*((${packetLength} * 8) / (${bitrate}*2)) * (100/(${OfferedLoadRate}*0.02))* 1us
#control data
*.car[*].applLayer[1..2].typename="ControlTrafficApp"
*.car[*].applLayer[1..2].stopTime=-1s
*.car[*].applLayer[1..2].sendInterval= ${nbrTrs}*((${packetLength} * 8) / (${bitrate}*2)) * (100/(${OfferedLoadRate}*0.02))* 1us ## 5 % control traffic
*.car[*].applLayer[1..2].startTime=uniform(0s,this.sendInterval) 
#control data for network 1
*.car[*].applLayer[1].appID=1
*.car[*].applLayer[1].interfaceId =0
#control data for network 2
*.car[*].applLayer[2].appID=2
*.car[*].applLayer[2].interfaceId =1
### Collect Stats parameters
*.car[*].*.averageMethod = "ema"
*.car[*].*.gamma=3
*.car[*].*.simpleWeights="0.4616,0.5383,0.0"
*.car[*].*.sendPeriod = 0.1

seed-set=${repeatId=1} ## 0..9 ### 10..49


output-vector-file = ${resultdir}/${configname}-${OfferedLoadRate}-${repetition}.vec
output-scalar-file = ${resultdir}/${configname}-${OfferedLoadRate}-${repetition}.sca

[Config random]
extends= loadBalancing
*.car[*].*.isDeciderActive =false




