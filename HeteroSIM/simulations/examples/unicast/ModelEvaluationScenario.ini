[General]
network = heterosim.simulations.networks.SimpleNetwork2

sim-time-limit =60s
outputvectormanager-class="omnetpp::envir::SqliteOutputVectorManager"
outputscalarmanager-class="omnetpp::envir::SqliteOutputScalarManager"
**.vector-recording = false

#### nodes numbers
*.numNodes = ${nbrTrs=30}
 
######## Common WiFi radio setting  ########
*.node[*].wlan[*].bitrate= ${bitrate=6} Mbps
*.node[*].wlan[*].mac.maxQueueSize = 34 #  -1 means unlimited


########Common LTE radio setting  ########
*.eNB*.nicType = "LteNicEnbD2DExperimental"
*.eNB*.**.amcMode = "D2D"
**.usePreconfiguredTxParams = true
**.d2dCqi = 7
### mobility
*.eNB.mobility.initFromDisplayString = false
*.eNB.mobility.initialX = 10m
*.eNB.mobility.initialY = 10m
############### AMC MODULE PARAMETERS ############### 
#TODO fix
**.numRbDl = 50
**.numRbUl = 50
**.numBands = 50

######## Common nodes app setting  ########
*.node[*].applLayer[*].msgLength=${packetLength=200}B

#### node mobility parameters
*.*.mobility.initFromDisplayString = false
*.node[*].mobility.constraintAreaMax* = 10m
*.node[*].mobility.constraintAreaMin* = 0m
*.node[*].mobility.*Z = 0m

seed-set=${repeatID=0..9} ## repetitions

[Config LoadProducers]
########## LoadProducers settings
*.node[0..9].*.isDeciderActive=false
*.node[0..9].*.isRandomDecision=false
*.node[0..9].numWiFiRadios = 1
*.node[0..9].numApps=1
*.node[0..9].*.interfaceToProtocolMapping="0:WiFi"
*.node[0..9].applLayer[0].typename="ControlTrafficApp"
*.node[0..9].applLayer[0].interfaceId=0
*.node[0..9].applLayer[0].sendInterval= 10*((${packetLength} * 8) / ${bitrate}) * (100/(${disruptiveTrafficLevel=20.. 100 step 20}))* 1us #
*.node[0..9].applLayer[0].startTime=uniform(0s,this.sendInterval) 
*.node[0..9].applLayer[0].stopTime=-1s

[Config decider]
extends=LoadProducers

#Nodes for traffic source
*.node[10..19].*.isDeciderActive =true
*.node[10..19].numWiFiRadios = 1
*.node[10..19].lteInterfaceIsActive = true
*.node[10..19].*.interfaceToProtocolMapping="0:WiFi,1:LTE"
*.node[10..19].numApps = 3

#data traffic
*.node[10..19].applLayer[0].typename="GenericApp"
*.node[10..19].applLayer[0].appID=0
# thanks to expression "string(10+ancestorIndex(1)))" node[10] sends to node[20], node[11] to node[21], node[12] to node[22], and so one 
*.node[10..19].applLayer[0].destAddress="node["+ string((10+ancestorIndex(1))) +"]" 
*.node[10..19].applLayer[0].sendInterval= 10*((${packetLength} * 8) / (2*${bitrate})) * (100/(${OfferedLoadRate=30,90}))* 1us #
*.node[10..19].applLayer[0].startTime=uniform(0.5s, 1s)

#control traffic
*.node[10..19].applLayer[1..2].typename="ControlTrafficApp"
*.node[10..19].applLayer[1..2].sendInterval= 10*((${packetLength} * 8) / (${bitrate})) * (100/5)* 1us
*.node[10..19].applLayer[1..2].startTime= uniform(0s,this.sendInterval)
*.node[10..19].*.controlTrafficSendInterval= 10*((${packetLength} * 8) / (${bitrate})) * (100/5)* 1us
#control data for network 1
*.node[10..19].applLayer[1].appID=1
*.node[10..19].applLayer[1].destAddress="node["+ string((10+ancestorIndex(1))) +"]" 
*.node[10..19].applLayer[1].interfaceId =0
#control data for network 2
*.node[10..19].applLayer[2].appID=2
*.node[10..19].applLayer[2].destAddress="node["+ string((10+ancestorIndex(1))) +"]" 
*.node[10..19].applLayer[2].interfaceId =1

#Nodes for traffic destination
*.node[20..29].*.isDeciderActive =false
*.node[20..29].lteInterfaceIsActive = true
*.node[20..29].numApps = 3
*.node[20..29].applLayer[*].startTime = 200000s # 200000s to do not generate message
*.node[20..29].applLayer[0].typename="GenericApp"
*.node[20..29].applLayer[1..2].typename="ControlTrafficApp"
*.node[20..29].applLayer[1].interfaceId =0
*.node[20..29].applLayer[2].interfaceId =1

[Config deciderWithMultipleApps]
extends=LoadProducers
#Nodes for traffic source
*.node[10..19].*.isDeciderActive =true
*.node[10..19].numWiFiRadios = 1
*.node[10..19].lteInterfaceIsActive = true
*.node[10..19].*.interfaceToProtocolMapping="0:WiFi,1:LTE"
*.node[10..19].*.minNumOfControlTrafficPktInDLT=10
*.node[10..19].numApps = 5
#data traffic
*.node[10..19].applLayer[0..2].typename="GenericApp"
*.node[10..19].applLayer[0].appID=0
*.node[10..19].applLayer[1].appID=1
*.node[10..19].applLayer[2].appID=2

# thanks to expression "string(10+ancestorIndex(1)))" node[10] sends to node[20], node[11] to node[21], node[12] to node[22], and so one 
*.node[10..19].applLayer[0..2].destAddress="node["+ string((10+ancestorIndex(1))) +"]" 
*.node[10..19].applLayer[0..2].startTime=uniform(0.5s, 1s)
*.node[10..19].applLayer[0..2].sendInterval= 3 * 10*((${packetLength} * 8) / (2*${bitrate})) * (100/(${OfferedLoadRate=30,90})) * 1us #

#control traffic
*.node[10..19].applLayer[3..4].typename="ControlTrafficApp"
*.node[10..19].applLayer[3..4].sendInterval= 10*((${packetLength} * 8) / (${bitrate})) * (100/5)* 1us
*.node[10..19].applLayer[3..4].startTime= uniform(0s,this.sendInterval)
*.node[10..19].*.controlTrafficSendInterval= 10*((${packetLength} * 8) / (${bitrate})) * (100/5)* 1us
#control data for network 1
*.node[10..19].applLayer[3].appID=3
*.node[10..19].applLayer[3].destAddress="node["+ string((10+ancestorIndex(1))) +"]" 
*.node[10..19].applLayer[3].interfaceId =0
#control data for network 2
*.node[10..19].applLayer[4].appID=4
*.node[10..19].applLayer[4].destAddress="node["+ string((10+ancestorIndex(1))) +"]" 
*.node[10..19].applLayer[4].interfaceId =1

#Nodes for traffic destination
*.node[20..29].*.isDeciderActive =false
*.node[20..29].lteInterfaceIsActive = true
*.node[20..29].numApps = 5
*.node[20..29].applLayer[*].startTime = 200000s # 200000s to do not generate message
*.node[20..29].applLayer[0..2].typename="GenericApp"
*.node[20..29].applLayer[0].appID =0
*.node[20..29].applLayer[1].appID =1
*.node[20..29].applLayer[2].appID =2
*.node[20..29].applLayer[3..4].typename="ControlTrafficApp"
*.node[20..29].applLayer[3].interfaceId =0
*.node[20..29].applLayer[4].interfaceId =1
*.node[20..29].applLayer[3].appID=3
*.node[20..29].applLayer[4].appID=4

[Config delayWeighted]
extends=decider
result-dir = delayWeighted
*.node[*].*.simpleWeights="0.936544,0.0631005,0.00035559"
*.node[10..19].*.minNumOfControlTrafficPktInDLT=5
[Config throughputWeighted]
extends=decider
result-dir = throughputWeighted
*.node[*].*.simpleWeights=" 0.0372046,0.962266,0.000529559"
*.node[10..19].*.minNumOfControlTrafficPktInDLT=0
[Config reliabilityWeighted]
extends=decider
result-dir = reliabilityWeighted
*.node[*].*.simpleWeights=" 0.0783219,0.0295513,0.892127"
*.node[10..19].*.minNumOfControlTrafficPktInDLT=5


[Config naiveSingleCriterionBasedDecision]
extends= decider
*.node[10..19].*.isDeciderActive=true
*.node[10..19].*.naiveSingleCriterionBasedDecision=true 
*.node[10..19].*.isRandomDecision=false 


[Config naiveDelayBasedDecision]
extends= naiveSingleCriterionBasedDecision
result-dir=naiveDelayBasedDecision
*.node[10..19].*.naiveSingleCriterionBasedDecisionChoice="0"

[Config naiveThroughputBasedDecision]
extends= naiveSingleCriterionBasedDecision
result-dir=naiveThroughputBasedDecision
*.node[10..19].*.naiveSingleCriterionBasedDecisionChoice="1"

[Config naiveReliabilityBasedDecision]
extends= naiveSingleCriterionBasedDecision
result-dir=naiveReliabilityBasedDecision
*.node[10..19].*.naiveSingleCriterionBasedDecisionChoice="2"


[Config appCoexistence]
extends=deciderWithMultipleApps
result-dir = appCoexistence
#*.node[*].*.simpleWeights="0.0783219,0.0295513,0.892127;0.0783219,0.0295513,0.892127;0.0783219,0.0295513,0.892127"
*.node[*].*.simpleWeights="0.936544,0.0631005,0.00035559;0.0372046,0.962266,0.000529559;0.0783219,0.0295513,0.892127"

[Config appCoexistenceNaive]
extends=deciderWithMultipleApps
result-dir = appCoexistenceNaive
*.node[10..19].*.isDeciderActive=true
*.node[10..19].*.naiveSingleCriterionBasedDecision=true 
*.node[10..19].*.isRandomDecision=false 
*.node[10..19].*.naiveSingleCriterionBasedDecisionChoice="0;1;2"

