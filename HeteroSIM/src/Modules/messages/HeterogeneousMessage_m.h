//
// Generated file, do not edit! Created by nedtool 5.4 from DeciderModule/messages/HeterogeneousMessage.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __HETEROGENEOUSMESSAGE_M_H
#define __HETEROGENEOUSMESSAGE_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef HeteroSIM_API
#  if defined(HeteroSIM_EXPORT)
#    define HeteroSIM_API  OPP_DLLEXPORT
#  elif defined(HeteroSIM_IMPORT)
#    define HeteroSIM_API  OPP_DLLIMPORT
#  else
#    define HeteroSIM_API
#  endif
#endif



// cplusplus {{
#define LTE 100
#define WLAN 101
#define OTHER 103
// }}

/**
 * Class generated from <tt>DeciderModule/messages/HeterogeneousMessage.msg:23</tt> by nedtool.
 * <pre>
 * packet HeterogeneousMessage
 * {
 *     string sourceAddress;
 *     string destinationAddress;
 *     int networkType;
 *     simtime_t sendingTime;
 * 
 * }
 * </pre>
 */
class HeteroSIM_API HeterogeneousMessage : public ::omnetpp::cPacket
{
  protected:
    ::omnetpp::opp_string sourceAddress;
    ::omnetpp::opp_string destinationAddress;
    int networkType;
    ::omnetpp::simtime_t sendingTime;

  private:
    void copy(const HeterogeneousMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const HeterogeneousMessage&);

  public:
    HeterogeneousMessage(const char *name=nullptr, short kind=0);
    HeterogeneousMessage(const HeterogeneousMessage& other);
    virtual ~HeterogeneousMessage();
    HeterogeneousMessage& operator=(const HeterogeneousMessage& other);
    virtual HeterogeneousMessage *dup() const override {return new HeterogeneousMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const char * getSourceAddress() const;
    virtual void setSourceAddress(const char * sourceAddress);
    virtual const char * getDestinationAddress() const;
    virtual void setDestinationAddress(const char * destinationAddress);
    virtual int getNetworkType() const;
    virtual void setNetworkType(int networkType);
    virtual ::omnetpp::simtime_t getSendingTime() const;
    virtual void setSendingTime(::omnetpp::simtime_t sendingTime);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const HeterogeneousMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, HeterogeneousMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef __HETEROGENEOUSMESSAGE_M_H

